// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// test_likelihood
double test_likelihood(Rcpp::NumericMatrix x, Rcpp:: NumericVector y, double tau, double tau_mu);
RcppExport SEXP _oopBART_test_likelihood(SEXP xSEXP, SEXP ySEXP, SEXP tauSEXP, SEXP tau_muSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp:: NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< double >::type tau_mu(tau_muSEXP);
    rcpp_result_gen = Rcpp::wrap(test_likelihood(x, y, tau, tau_mu));
    return rcpp_result_gen;
END_RCPP
}
// test_mu_update
double test_mu_update(Rcpp::NumericMatrix x, Rcpp:: NumericVector y, double tau, double tau_mu);
RcppExport SEXP _oopBART_test_mu_update(SEXP xSEXP, SEXP ySEXP, SEXP tauSEXP, SEXP tau_muSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp:: NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< double >::type tau_mu(tau_muSEXP);
    rcpp_result_gen = Rcpp::wrap(test_mu_update(x, y, tau, tau_mu));
    return rcpp_result_gen;
END_RCPP
}
// test_grow
Rcpp::NumericVector test_grow(Rcpp::NumericMatrix x, Rcpp::NumericMatrix x_test, Rcpp:: NumericVector y, Rcpp:: NumericMatrix xcut, double tau, double tau_mu);
RcppExport SEXP _oopBART_test_grow(SEXP xSEXP, SEXP x_testSEXP, SEXP ySEXP, SEXP xcutSEXP, SEXP tauSEXP, SEXP tau_muSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type x_test(x_testSEXP);
    Rcpp::traits::input_parameter< Rcpp:: NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< Rcpp:: NumericMatrix >::type xcut(xcutSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< double >::type tau_mu(tau_muSEXP);
    rcpp_result_gen = Rcpp::wrap(test_grow(x, x_test, y, xcut, tau, tau_mu));
    return rcpp_result_gen;
END_RCPP
}
// using_member
double using_member(int x);
RcppExport SEXP _oopBART_using_member(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(using_member(x));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_oopBART_test_likelihood", (DL_FUNC) &_oopBART_test_likelihood, 4},
    {"_oopBART_test_mu_update", (DL_FUNC) &_oopBART_test_mu_update, 4},
    {"_oopBART_test_grow", (DL_FUNC) &_oopBART_test_grow, 6},
    {"_oopBART_using_member", (DL_FUNC) &_oopBART_using_member, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_oopBART(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
